name: Financial Planner CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_ML: ${{ github.repository }}/ml
  IMAGE_NAME_WORKER: ${{ github.repository }}/worker
  
jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security tools
        run: |
          pip install safety bandit semgrep
          npm install -g snyk audit-ci
      
      - name: Run Python security scan
        run: |
          # Check for known vulnerabilities in dependencies
          safety check -r backend/requirements.txt --json --output safety-report.json || true
          
          # Static security analysis
          bandit -r backend/app -f json -o bandit-report.json || true
          
          # Semgrep security analysis
          semgrep --config=auto backend/ --json --output=semgrep-report.json || true
      
      - name: Run dependency audit
        working-directory: frontend
        run: |
          npm audit --audit-level=high --json > npm-audit-report.json || true
          audit-ci --config .auditrc.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json
            frontend/npm-audit-report.json
  
  # Backend Testing Pipeline
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Set up test environment
        run: |
          cd backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_db"
          export REDIS_URL="redis://localhost:6379/0"
          export ENV="test"
          python -m alembic upgrade head
      
      - name: Run unit tests
        run: |
          cd backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_db"
          export REDIS_URL="redis://localhost:6379/0"
          export ENV="test"
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=85
      
      - name: Run integration tests
        run: |
          cd backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_db"
          export REDIS_URL="redis://localhost:6379/0"
          export ENV="test"
          pytest tests/integration/ -v --cov-append --cov=app --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/coverage.xml
            backend/htmlcov/
  
  # Frontend Testing Pipeline
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint
      
      - name: Run type checking
        working-directory: frontend
        run: npm run type-check
      
      - name: Run unit tests
        working-directory: frontend
        run: npm run test:coverage
      
      - name: Run E2E tests
        working-directory: frontend
        run: |
          npm run build
          npm run test:e2e:headless
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage
  
  # Load Testing
  load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: [backend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install load testing tools
        run: |
          pip install locust
      
      - name: Run load tests
        run: |
          cd backend/tests/load-testing
          locust --config=locust.conf --html=load-test-report.html --csv=load-test-results
        timeout-minutes: 10
      
      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: backend/tests/load-testing/load-test-*
  
  # Build Docker Images
  build-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      image-digest-api: ${{ steps.build-api.outputs.digest }}
      image-digest-ml: ${{ steps.build-ml.outputs.digest }}
      image-digest-worker: ${{ steps.build-worker.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push API image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile.production
          target: api
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push ML service image
        id: build-ml
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile.production
          target: ml-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ML }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      
      - name: Build and push Worker image
        id: build-worker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile.production
          target: worker
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
  
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, load-tests]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.financialplanner.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name financial-planner-staging
      
      - name: Deploy to Kubernetes
        run: |
          # Update image tags in manifests
          sed -i "s|financial-planner/api:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}|g" k8s/deployments/api-deployment.yaml
          sed -i "s|financial-planner/ml:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ML }}:${{ github.sha }}|g" k8s/deployments/ml-deployment.yaml
          sed -i "s|financial-planner/worker:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:${{ github.sha }}|g" k8s/deployments/api-deployment.yaml
          
          # Apply manifests
          kubectl apply -f k8s/configmaps/ -n staging
          kubectl apply -f k8s/secrets/ -n staging
          kubectl apply -f k8s/deployments/ -n staging
          kubectl apply -f k8s/services/ -n staging
          kubectl apply -f k8s/hpa-autoscaler.yaml -n staging
          kubectl apply -f k8s/ingress.yaml -n staging
          
          # Wait for rollout
          kubectl rollout status deployment/financial-planner-api -n staging --timeout=600s
          kubectl rollout status deployment/financial-planner-ml -n staging --timeout=600s
          kubectl rollout status deployment/financial-planner-worker -n staging --timeout=600s
      
      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=financial-planner-api -n staging --timeout=300s
          
          # Run smoke tests
          python backend/tests/smoke_tests.py --base-url=https://staging-api.financialplanner.com
  
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.financialplanner.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name financial-planner-prod
      
      - name: Blue-Green Deployment
        run: |
          # Create new deployment with green suffix
          cp k8s/deployments/api-deployment.yaml k8s/deployments/api-deployment-green.yaml
          sed -i "s/financial-planner-api/financial-planner-api-green/g" k8s/deployments/api-deployment-green.yaml
          sed -i "s|financial-planner/api:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}|g" k8s/deployments/api-deployment-green.yaml
          
          # Deploy green version
          kubectl apply -f k8s/deployments/api-deployment-green.yaml -n production
          kubectl rollout status deployment/financial-planner-api-green -n production --timeout=600s
          
          # Health check on green deployment
          kubectl wait --for=condition=ready pod -l app=financial-planner-api-green -n production --timeout=300s
          
          # Switch traffic to green
          kubectl patch service financial-planner-api-service -n production -p '{"spec":{"selector":{"app":"financial-planner-api-green"}}}'
          
          # Wait and verify
          sleep 30
          python backend/tests/smoke_tests.py --base-url=https://api.financialplanner.com
          
          # Clean up blue deployment
          kubectl delete deployment financial-planner-api -n production || true
          kubectl patch deployment financial-planner-api-green -n production -p '{"metadata":{"name":"financial-planner-api"}}'
      
      - name: Update ML and Worker services
        run: |
          sed -i "s|financial-planner/ml:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ML }}:${{ github.sha }}|g" k8s/deployments/ml-deployment.yaml
          sed -i "s|financial-planner/worker:.*|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:${{ github.sha }}|g" k8s/deployments/api-deployment.yaml
          
          kubectl apply -f k8s/deployments/ml-deployment.yaml -n production
          kubectl apply -f k8s/deployments/api-deployment.yaml -n production
          
          kubectl rollout status deployment/financial-planner-ml -n production --timeout=600s
          kubectl rollout status deployment/financial-planner-worker -n production --timeout=600s
      
      - name: Post-deployment verification
        run: |
          # Comprehensive health checks
          python backend/tests/post_deployment_tests.py --environment=production
          
          # Performance baseline check
          python backend/tests/performance_verification.py --baseline-file=performance_baseline.json
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
  
  # Rollback mechanism
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production]
    environment:
      name: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name financial-planner-prod
      
      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/financial-planner-api -n production
          kubectl rollout undo deployment/financial-planner-ml -n production
          kubectl rollout undo deployment/financial-planner-worker -n production
          
          kubectl rollout status deployment/financial-planner-api -n production --timeout=300s
          kubectl rollout status deployment/financial-planner-ml -n production --timeout=300s
          kubectl rollout status deployment/financial-planner-worker -n production --timeout=300s