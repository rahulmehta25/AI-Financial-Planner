version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres-timescale:
    image: timescale/timescaledb:latest-pg15
    container_name: financial_postgres
    environment:
      POSTGRES_DB: financial_db
      POSTGRES_USER: financial_user
      POSTGRES_PASSWORD: financial_password
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      TIMESCALEDB_TELEMETRY: "off"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U financial_user -d financial_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial_network
    restart: unless-stopped

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: financial_redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial_network
    restart: unless-stopped

  # RabbitMQ for advanced message queuing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: financial_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq_user
      RABBITMQ_DEFAULT_PASS: rabbitmq_password
      RABBITMQ_DEFAULT_VHOST: financial
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log [{console,[{level,warning}]}]"
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - financial_network
    restart: unless-stopped

  # Celery worker for async tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: financial_celery_worker
    command: celery -A app.core.infrastructure.message_queue.celery_app worker --loglevel=info --concurrency=4
    environment:
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/1
      DATABASE_URL: postgresql+asyncpg://financial_user:financial_password@postgres-timescale:5432/financial_db
      REDIS_URL: redis://:redis_password@redis:6379/2
      PYTHONPATH: /app
    depends_on:
      redis:
        condition: service_healthy
      postgres-timescale:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - financial_network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: financial_celery_beat
    command: celery -A app.core.infrastructure.message_queue.celery_app beat --loglevel=info
    environment:
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/1
      DATABASE_URL: postgresql+asyncpg://financial_user:financial_password@postgres-timescale:5432/financial_db
      REDIS_URL: redis://:redis_password@redis:6379/2
      PYTHONPATH: /app
    depends_on:
      redis:
        condition: service_healthy
      postgres-timescale:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - financial_network
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: financial_flower
    command: celery -A app.core.infrastructure.message_queue.celery_app flower --port=5555
    environment:
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/1
      FLOWER_BASIC_AUTH: admin:admin_password
      PYTHONPATH: /app
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - financial_network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: financial_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - financial_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: financial_grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_password
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_INSTALL_PLUGINS: redis-datasource,redis-app
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - financial_network
    restart: unless-stopped

  # Nginx as reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: financial_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - financial_network
    restart: unless-stopped

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: financial_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      DATABASE_URL: postgresql+asyncpg://financial_user:financial_password@postgres-timescale:5432/financial_db
      REDIS_URL: redis://:redis_password@redis:6379/2
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/0
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: rabbitmq_user
      RABBITMQ_PASSWORD: rabbitmq_password
      RABBITMQ_VHOST: financial
      SECRET_KEY: your_secret_key_here_change_in_production
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    depends_on:
      postgres-timescale:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - financial_network
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: financial_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@financial.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres-timescale
    networks:
      - financial_network
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: financial_redis_commander
    environment:
      REDIS_HOSTS: redis:redis:6379:0:redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - financial_network
    restart: unless-stopped

networks:
  financial_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local