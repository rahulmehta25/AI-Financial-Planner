# Docker Compose for Financial Planning API
# Optimized for local development and testing

version: '3.8'

services:
  # Main API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: development
      args:
        BUILD_ENV: development
    container_name: financial-planning-api
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    environment:
      # Database
      DATABASE_URL: postgresql://financial_planning:financial_planning@postgres:5432/financial_planning
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Application
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      SECRET_KEY: dev-secret-key-change-in-production
      
      # External APIs (use environment variables or .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY:-}
      IEX_CLOUD_API_KEY: ${IEX_CLOUD_API_KEY:-}
      PLAID_CLIENT_ID: ${PLAID_CLIENT_ID:-}
      PLAID_SECRET: ${PLAID_SECRET:-}
      
      # Features
      ENABLE_VOICE_FEATURES: "true"
      ENABLE_AI_RECOMMENDATIONS: "true"
      ENABLE_BLOCKCHAIN_AUDIT: "false"  # Disabled for local dev
      ENABLE_PDF_EXPORT: "true"
      
      # Performance
      WORKERS: "1"
      MAX_CONNECTIONS: "100"
      
      # Development
      RUN_MIGRATIONS: "true"
      
    volumes:
      - ./app:/app/app:ro
      - ./tests:/app/tests:ro
      - ./alembic:/app/alembic:ro
      - ./alembic.ini:/app/alembic.ini:ro
      - ./requirements.txt:/app/requirements.txt:ro
      - api_logs:/app/logs
      - api_tmp:/app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: financial-planning-postgres
    environment:
      POSTGRES_DB: financial_planning
      POSTGRES_USER: financial_planning
      POSTGRES_PASSWORD: financial_planning
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - financial-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U financial_planning -d financial_planning"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: financial-planning-redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - financial-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: runtime
    container_name: financial-planning-celery-worker
    command: celery -A app.main.celery worker --loglevel=INFO --concurrency=2
    environment:
      DATABASE_URL: postgresql://financial_planning:financial_planning@postgres:5432/financial_planning
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      SECRET_KEY: dev-secret-key-change-in-production
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    volumes:
      - ./app:/app/app:ro
      - celery_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial-planning-network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: runtime
    container_name: financial-planning-celery-beat
    command: celery -A app.main.celery beat --loglevel=INFO --schedule=/app/celerybeat-schedule
    environment:
      DATABASE_URL: postgresql://financial_planning:financial_planning@postgres:5432/financial_planning
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      SECRET_KEY: dev-secret-key-change-in-production
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    volumes:
      - ./app:/app/app:ro
      - celery_schedule:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial-planning-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: financial-planning-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx-default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - financial-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: financial-planning-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - financial-planning-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: financial-planning-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: localhost
      GF_SMTP_ENABLED: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - financial-planning-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Database Administration - pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: financial-planning-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@financialplanning.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - financial-planning-network
    restart: unless-stopped
    profiles:
      - admin

  # Redis Administration - Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: financial-planning-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - financial-planning-network
    restart: unless-stopped
    profiles:
      - admin

  # Testing Service
  test:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: testing
    container_name: financial-planning-test
    environment:
      DATABASE_URL: postgresql://financial_planning:financial_planning@postgres:5432/financial_planning_test
      REDIS_URL: redis://redis:6379/15  # Use different Redis DB for testing
      ENVIRONMENT: test
      LOG_LEVEL: DEBUG
      SECRET_KEY: test-secret-key
    volumes:
      - ./app:/app/app:ro
      - ./tests:/app/tests:ro
      - ./pytest.ini:/app/pytest.ini:ro
      - test_reports:/app/test-reports
    command: >
      sh -c "
        alembic upgrade head &&
        pytest -v --cov=app --cov-report=xml --cov-report=html --junitxml=test-reports/pytest.xml
      "
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial-planning-network
    profiles:
      - test

  # Load Testing with Locust
  locust:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: testing
    container_name: financial-planning-locust
    ports:
      - "8089:8089"
    environment:
      LOCUST_HOST: http://api:8000
    volumes:
      - ./tests/load:/app/tests/load:ro
    command: locust -f tests/load/locustfile.py --host=http://api:8000
    depends_on:
      - api
    networks:
      - financial-planning-network
    profiles:
      - load-test

# Networks
networks:
  financial-planning-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
  api_logs:
    driver: local
  api_tmp:
    driver: local
  celery_logs:
    driver: local
  celery_schedule:
    driver: local
  nginx_logs:
    driver: local
  test_reports:
    driver: local