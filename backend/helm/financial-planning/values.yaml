# Default values for financial-planning.
# This is a YAML-formatted file.
# Declare variables to be substituted into templates.

## Global parameters
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

## Image parameters
image:
  registry: ghcr.io
  repository: financial-planning/backend
  tag: "latest"
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  pullSecrets: []
  debug: false

## Application parameters
app:
  name: financial-planning-api
  environment: production
  logLevel: INFO
  workers: 4
  maxConnections: 1000

## Deployment parameters
replicaCount: 3

## Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

## Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 50%

## Autoscaling parameters
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  customMetrics: []

## Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
    ephemeral-storage: 2Gi
  requests:
    cpu: 250m
    memory: 512Mi
    ephemeral-storage: 1Gi

## Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

## Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
    - ALL

## Service parameters
service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  annotations: {}
  loadBalancerIP: ""
  loadBalancerSourceRanges: []

## Ingress parameters
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.financialplanning.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: financial-planning-tls
      hosts:
        - api.financialplanning.com

## Canary deployment
canary:
  enabled: false
  weight: 10
  header: "X-Canary"
  headerValue: "true"

## Blue-Green deployment
blueGreen:
  enabled: false
  activeSlot: blue

## Health checks
healthCheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /api/v1/health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  startupProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6

## Persistence
persistence:
  enabled: false
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  annotations: {}

## Node selection
nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: financial-planning
        topologyKey: kubernetes.io/hostname

## Service account
serviceAccount:
  create: true
  automountServiceAccountToken: false
  annotations: {}
  name: ""

## RBAC
rbac:
  create: true

## Network policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from: []
      ports:
        - protocol: TCP
          port: 8000
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 5432
        - protocol: TCP
          port: 6379
        - protocol: UDP
          port: 53

## Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
  prometheusRule:
    enabled: true
    rules: []

## Configuration
config:
  # Database configuration
  database:
    host: postgresql
    port: 5432
    name: financial_planning
    poolSize: 20
    maxOverflow: 30
    poolTimeout: 30
    poolRecycle: 3600
  
  # Redis configuration  
  redis:
    host: redis
    port: 6379
    db: 0
    maxConnections: 100
    socketTimeout: 5
    socketConnectTimeout: 5
  
  # API configuration
  api:
    v1Str: "/api/v1"
    projectName: "Financial Planning API"
    allowedHosts: "*.financialplanning.com,localhost,127.0.0.1"
  
  # Security configuration
  security:
    accessTokenExpireMinutes: 1440
    refreshTokenExpireMinutes: 10080
    algorithm: "HS256"
  
  # External services
  external:
    rateLimitPerMinute: 100
    rateLimitBurst: 200
  
  # Features
  features:
    enableVoice: true
    enableAI: true
    enableBlockchain: true
    enablePDF: true
  
  # Performance
  performance:
    maxRequestSize: 10485760
    timeoutSeconds: 120
    keepaliveTimeout: 5

## Secrets (these should be overridden in production)
secrets:
  databaseUrl: "postgresql://user:password@postgresql:5432/financial_planning"
  redisUrl: "redis://redis:6379/0"
  secretKey: "your-secret-key"
  openaiApiKey: ""
  anthropicApiKey: ""
  alphaVantageApiKey: ""
  iexCloudApiKey: ""
  plaidClientId: ""
  plaidSecret: ""
  sentryDsn: ""
  encryptionKey: ""

## External services configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres"
    username: "financial_planning"
    password: "financial_planning"
    database: "financial_planning"
  primary:
    persistence:
      enabled: true
      size: 50Gi
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 1000m

redis:
  enabled: true
  auth:
    enabled: true
    password: "redis"
  master:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 500m

ingress-nginx:
  enabled: false
  controller:
    replicaCount: 2
    resources:
      requests:
        cpu: 100m
        memory: 90Mi
      limits:
        cpu: 1000m
        memory: 512Mi