# Financial Planning System - Helm Chart Values
# This file contains default values for the Financial Planning System
# All sensitive values should be provided via environment variables or external secrets

apiVersion: v2
name: financial-planning
description: AI-driven financial planning and simulation system
type: application
version: 1.0.0
appVersion: "1.0.0"

# Image configuration
image:
  repository: financial-planning
  tag: "1.0.0"
  pullPolicy: IfNotPresent
  imagePullSecrets: []

# Image pull secrets for private registries
pullSecrets: []

# Service account configuration
serviceAccount:
  create: true
  name: "financial-planning"
  annotations: {}
  automountServiceAccountToken: false

# Pod security context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  supplementalGroups: [1000]

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

# Service configuration
service:
  type: ClusterIP
  port: 8000
  targetPort: 8000
  annotations: {}

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: financial-planning.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: financial-planning-tls
      hosts:
        - financial-planning.local

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  maxUnavailable: 0

# Horizontal pod autoscaler
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8000

# Pod anti-affinity for high availability
podAntiAffinity:
  enabled: true
  type: preferredDuringSchedulingIgnoredDuringExecution
  weight: 100
  topologyKey: kubernetes.io/hostname

# Node affinity
nodeAffinity:
  enabled: false
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
      - matchExpressions:
          - key: node-role.kubernetes.io/worker
            operator: In
            values:
              - "true"

# Tolerations
tolerations: []

# Annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"

# Labels
podLabels:
  app: financial-planning
  version: "1.0.0"

# Environment variables
env:
  - name: ENVIRONMENT
    value: "production"
  - name: LOG_LEVEL
    value: "INFO"
  - name: DATABASE_URL
    valueFrom:
      secretKeyRef:
        name: financial-planning-secrets
        key: database-url
  - name: SECRET_KEY
    valueFrom:
      secretKeyRef:
        name: financial-planning-secrets
        key: secret-key
  - name: REDIS_URL
    valueFrom:
      secretKeyRef:
        name: financial-planning-secrets
        key: redis-url

# Configuration files
config:
  database:
    pool_size: 20
    max_overflow: 30
    pool_timeout: 30
  security:
    access_token_expire_minutes: 1440
    refresh_token_expire_minutes: 10080
    min_password_length: 8
    password_hash_rounds: 12
  rate_limiting:
    per_minute: 60
    per_hour: 1000
  simulation:
    default_monte_carlo_iterations: 50000
    max_monte_carlo_iterations: 100000
    simulation_timeout_seconds: 300
    max_concurrent_simulations: 10

# External secrets configuration
externalSecrets:
  enabled: true
  secretStore:
    name: aws-secrets-manager
    kind: SecretStore
  externalSecret:
    name: financial-planning-secrets
    refreshInterval: "1h"
    secretStoreRef:
      name: aws-secrets-manager
      kind: SecretStore
    target:
      name: financial-planning-secrets
      type: Opaque
    data:
      - secretKey: database-url
        remoteRef:
          key: financial-planning/database-url
      - secretKey: secret-key
        remoteRef:
          key: financial-planning/secret-key
      - secretKey: redis-url
        remoteRef:
          key: financial-planning/redis-url
      - secretKey: openai-api-key
        remoteRef:
          key: financial-planning/openai-api-key
      - secretKey: anthropic-api-key
        remoteRef:
          key: financial-planning/anthropic-api-key
      - secretKey: alpha-vantage-api-key
        remoteRef:
          key: financial-planning/alpha-vantage-api-key
      - secretKey: iex-cloud-api-key
        remoteRef:
          key: financial-planning/iex-cloud-api-key
      - secretKey: plaid-secret
        remoteRef:
          key: financial-planning/plaid-secret
      - secretKey: encryption-key
        remoteRef:
          key: financial-planning/encryption-key

# Database configuration
database:
  enabled: true
  type: postgresql
  host: postgresql
  port: 5432
  name: financial_planning
  user: financial_planning
  password: "${POSTGRES_PASSWORD}"
  pool_size: 20
  max_overflow: 30
  pool_timeout: 30

# Redis configuration
redis:
  enabled: true
  host: redis
  port: 6379
  password: "${REDIS_PASSWORD}"
  database: 0

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
  podMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
  prometheusRule:
    enabled: true

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention:
    days: 30
    copies: 5
  storage:
    type: s3
    bucket: financial-planning-backups
    region: us-west-2

# Security configuration
security:
  enabled: true
  networkPolicy:
    enabled: true
  podSecurityStandards:
    enabled: true
    level: restricted
  securityContext:
    enabled: true
  rbac:
    enabled: true
    create: true

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Startup probe
startupProbe:
  httpGet:
    path: /startup
    port: 8000
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# Lifecycle hooks
lifecycle:
  preStop:
    exec:
      command:
        - /bin/sh
        - -c
        - "sleep 10"

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Volumes
volumes: []

# Volume mounts
volumeMounts: []

# Affinity
affinity: {}

# Tolerations
tolerations: []

# Node selector
nodeSelector: {}

# Host aliases
hostAliases: []

# Dns policy
dnsPolicy: ClusterFirst

# Restart policy
restartPolicy: Always

# Termination grace period seconds
terminationGracePeriodSeconds: 30

# Topology spread constraints
topologySpreadConstraints: []

# Security context
securityContext: {}

# Service account
serviceAccount: {}

# Automount service account token
automountServiceAccountToken: false

# Priority class name
priorityClassName: ""

# Host network
hostNetwork: false

# Host PID
hostPID: false

# Host IPC
hostIPC: false

# Share process namespace
shareProcessNamespace: false

# Security context
securityContext: {}

# Runtime class name
runtimeClassName: ""

# Enable service links
enableServiceLinks: true

# Set hostname as FQDN
setHostnameAsFQDN: false

# DNS config
dnsConfig: {}

# Readiness gates
readinessGates: []

# Preemption policy
preemptionPolicy: PreemptLowerOrNewer

# Overhead
overhead: {}

# Scheduling gates
schedulingGates: []