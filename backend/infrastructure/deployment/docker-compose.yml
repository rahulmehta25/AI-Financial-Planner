# Docker Compose for Financial Planning Platform - Local Development
version: '3.8'

networks:
  financial-planning-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  redis-data:
  kafka-data:
  zookeeper-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:

services:
  # Database Services
  postgresql:
    image: postgres:15-alpine
    container_name: financial-planning-postgres
    environment:
      POSTGRES_DB: financial_planning
      POSTGRES_USER: financial_planning_user
      POSTGRES_PASSWORD: financial_planning_password
      POSTGRES_MULTIPLE_DATABASES: financial_planning_events,financial_planning_read,financial_planning_saga
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sh:/docker-entrypoint-initdb.d/init.sh
    ports:
      - "5432:5432"
    networks:
      - financial-planning-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U financial_planning_user -d financial_planning"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: financial-planning-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - financial-planning-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Message Queue and Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: financial-planning-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    ports:
      - "2181:2181"
    networks:
      - financial-planning-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: financial-planning-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - financial-planning-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: financial-planning-elasticsearch
    environment:
      - node.name=es01
      - cluster.name=financial-planning-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - financial-planning-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: financial-planning-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - financial-planning-network

  grafana:
    image: grafana/grafana:10.0.0
    container_name: financial-planning-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    networks:
      - financial-planning-network
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: financial-planning-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    networks:
      - financial-planning-network

  # API Gateway
  kong:
    image: kong:3.3.0-alpine
    container_name: financial-planning-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    volumes:
      - ./api-gateway/kong.yml:/kong/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    networks:
      - financial-planning-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # GraphQL Gateway
  graphql-gateway:
    build:
      context: ./communication/graphql
      dockerfile: Dockerfile
    container_name: financial-planning-graphql-gateway
    environment:
      NODE_ENV: development
      PORT: 4000
      JWT_SECRET_KEY: your_jwt_secret_key_here
    ports:
      - "4000:4000"
    networks:
      - financial-planning-network
    depends_on:
      - user-service
      - banking-service
      - simulation-service
      - ml-service
      - notification-service
      - document-service

  # Microservices
  user-service:
    build:
      context: ../
      dockerfile: infrastructure/microservices/user-service/Dockerfile
    container_name: financial-planning-user-service
    environment:
      DB_HOST: postgresql
      DB_PORT: 5432
      DB_NAME: financial_planning
      DB_USER: user_service_user
      DB_PASSWORD: user_service_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      JWT_SECRET_KEY: your_jwt_secret_key_here
      ENCRYPTION_KEY: your_encryption_key_here
      SESSION_SECRET: your_session_secret_here
    ports:
      - "8002:8002"
    networks:
      - financial-planning-network
    depends_on:
      - postgresql
      - redis
      - kafka
    volumes:
      - ../app:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  banking-service:
    build:
      context: ../
      dockerfile: infrastructure/microservices/banking-service/Dockerfile
    container_name: financial-planning-banking-service
    environment:
      DB_HOST: postgresql
      DB_PORT: 5432
      DB_NAME: financial_planning
      DB_USER: banking_service_user
      DB_PASSWORD: banking_service_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      PLAID_CLIENT_ID: your_plaid_client_id
      PLAID_SECRET: your_plaid_secret
      PLAID_ENV: sandbox
      YODLEE_COBRAND_NAME: your_yodlee_cobrand
      YODLEE_APPLICATION_ID: your_yodlee_app_id
      YODLEE_SECRET: your_yodlee_secret
      ENCRYPTION_KEY: your_encryption_key_here
      JWT_SECRET_KEY: your_jwt_secret_key_here
    ports:
      - "8003:8003"
    networks:
      - financial-planning-network
    depends_on:
      - postgresql
      - redis
      - kafka
    volumes:
      - ../app:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  simulation-service:
    build:
      context: ../
      dockerfile: infrastructure/microservices/simulation-service/Dockerfile
    container_name: financial-planning-simulation-service
    environment:
      DB_HOST: postgresql
      DB_PORT: 5432
      DB_NAME: financial_planning
      DB_USER: simulation_service_user
      DB_PASSWORD: simulation_service_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      JWT_SECRET_KEY: your_jwt_secret_key_here
    ports:
      - "8001:8001"
    networks:
      - financial-planning-network
    depends_on:
      - postgresql
      - redis
      - kafka
    volumes:
      - ../app:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ml-service:
    build:
      context: ../
      dockerfile: infrastructure/microservices/ml-service/Dockerfile
    container_name: financial-planning-ml-service
    environment:
      DB_HOST: postgresql
      DB_PORT: 5432
      DB_NAME: financial_planning
      DB_USER: ml_service_user
      DB_PASSWORD: ml_service_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      MLFLOW_TRACKING_URI: http://mlflow:5000
      JWT_SECRET_KEY: your_jwt_secret_key_here
    ports:
      - "8004:8004"
    networks:
      - financial-planning-network
    depends_on:
      - postgresql
      - redis
      - kafka
    volumes:
      - ../app:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ../
      dockerfile: infrastructure/microservices/notification-service/Dockerfile
    container_name: financial-planning-notification-service
    environment:
      DB_HOST: postgresql
      DB_PORT: 5432
      DB_NAME: financial_planning
      DB_USER: notification_service_user
      DB_PASSWORD: notification_service_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      SENDGRID_API_KEY: your_sendgrid_api_key
      TWILIO_ACCOUNT_SID: your_twilio_account_sid
      TWILIO_AUTH_TOKEN: your_twilio_auth_token
      TWILIO_PHONE_NUMBER: your_twilio_phone_number
      FIREBASE_PROJECT_ID: your_firebase_project_id
      JWT_SECRET_KEY: your_jwt_secret_key_here
    ports:
      - "8005:8005"
    networks:
      - financial-planning-network
    depends_on:
      - postgresql
      - redis
      - kafka
    volumes:
      - ../app:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  document-service:
    build:
      context: ../
      dockerfile: infrastructure/microservices/document-service/Dockerfile
    container_name: financial-planning-document-service
    environment:
      DB_HOST: postgresql
      DB_PORT: 5432
      DB_NAME: financial_planning
      DB_USER: document_service_user
      DB_PASSWORD: document_service_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      S3_BUCKET: financial-planning-documents-dev
      AWS_ACCESS_KEY_ID: your_aws_access_key_id
      AWS_SECRET_ACCESS_KEY: your_aws_secret_access_key
      AWS_REGION: us-east-1
      JWT_SECRET_KEY: your_jwt_secret_key_here
    ports:
      - "8006:8006"
    networks:
      - financial-planning-network
    depends_on:
      - postgresql
      - redis
      - kafka
    volumes:
      - ../app:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Platform
  mlflow:
    image: python:3.11-slim
    container_name: financial-planning-mlflow
    command: >
      bash -c "pip install mlflow psycopg2-binary && 
      mlflow server --host 0.0.0.0 --port 5000 
      --backend-store-uri postgresql://mlflow_user:mlflow_password@postgresql:5432/mlflow 
      --default-artifact-root s3://financial-planning-ml-artifacts"
    environment:
      AWS_ACCESS_KEY_ID: your_aws_access_key_id
      AWS_SECRET_ACCESS_KEY: your_aws_secret_access_key
      AWS_REGION: us-east-1
    ports:
      - "5000:5000"
    networks:
      - financial-planning-network
    depends_on:
      - postgresql

  # Development Tools
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: financial-planning-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8080:8080"
    networks:
      - financial-planning-network
    depends_on:
      - kafka

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: financial-planning-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
    ports:
      - "8081:8081"
    networks:
      - financial-planning-network
    depends_on:
      - redis

  # Load Balancer for Development
  nginx:
    image: nginx:alpine
    container_name: financial-planning-nginx
    volumes:
      - ./api-gateway/nginx-dev.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    networks:
      - financial-planning-network
    depends_on:
      - user-service
      - banking-service
      - simulation-service
      - ml-service
      - notification-service
      - document-service
      - graphql-gateway