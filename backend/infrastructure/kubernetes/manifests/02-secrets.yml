# Kubernetes Secrets for Financial Planning Application
# NOTE: These are templates with base64 encoded placeholder values
# In production, use external secret management like AWS Secrets Manager, HashiCorp Vault, or Sealed Secrets

apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: financial-planning
    app.kubernetes.io/component: database
    app.kubernetes.io/version: "1.0.0"
type: Opaque
data:
  # PostgreSQL Configuration - Replace with actual base64 encoded values
  host: cG9zdGdyZXNxbC5maW5hbmNpYWwtcGxhbm5pbmctZGF0YS5zdmMuY2x1c3Rlci5sb2NhbA==  # postgresql.financial-planning-data.svc.cluster.local
  username: ZmluYW5jaWFsX3BsYW5uaW5nX3VzZXI=  # financial_planning_user
  password: <BASE64_ENCODED_DB_PASSWORD>
  database: ZmluYW5jaWFsX3BsYW5uaW5n  # financial_planning
  
  # Service-specific database users
  user-service-username: dXNlcl9zZXJ2aWNlX3VzZXI=  # user_service_user
  user-service-password: <BASE64_ENCODED_USER_SERVICE_PASSWORD>
  banking-service-username: YmFua2luZ19zZXJ2aWNlX3VzZXI=  # banking_service_user
  banking-service-password: <BASE64_ENCODED_BANKING_SERVICE_PASSWORD>
  ml-service-username: bWxfc2VydmljZV91c2Vy  # ml_service_user
  ml-service-password: <BASE64_ENCODED_ML_SERVICE_PASSWORD>

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
type: Opaque
data:
  password: <BASE64_ENCODED_REDIS_PASSWORD>
  username: ZGVmYXVsdA==  # default

---
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: financial-planning
    app.kubernetes.io/component: auth
type: Opaque
data:
  secret-key: <BASE64_ENCODED_JWT_SECRET>
  refresh-secret: <BASE64_ENCODED_JWT_REFRESH_SECRET>

---
apiVersion: v1
kind: Secret
metadata:
  name: encryption-key
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: financial-planning
    app.kubernetes.io/component: encryption
type: Opaque
data:
  key: <BASE64_ENCODED_ENCRYPTION_KEY>
  salt: <BASE64_ENCODED_ENCRYPTION_SALT>

---
apiVersion: v1
kind: Secret
metadata:
  name: plaid-credentials
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: banking-service
    app.kubernetes.io/component: plaid
type: Opaque
data:
  client-id: <BASE64_ENCODED_PLAID_CLIENT_ID>
  secret: <BASE64_ENCODED_PLAID_SECRET>
  public-key: <BASE64_ENCODED_PLAID_PUBLIC_KEY>
  webhook-url: <BASE64_ENCODED_PLAID_WEBHOOK_URL>

---
apiVersion: v1
kind: Secret
metadata:
  name: notification-credentials
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: notification-service
    app.kubernetes.io/component: notifications
type: Opaque
data:
  # SendGrid configuration
  sendgrid-api-key: <BASE64_ENCODED_SENDGRID_API_KEY>
  sendgrid-from-email: <BASE64_ENCODED_FROM_EMAIL>
  
  # Twilio configuration
  twilio-account-sid: <BASE64_ENCODED_TWILIO_ACCOUNT_SID>
  twilio-auth-token: <BASE64_ENCODED_TWILIO_AUTH_TOKEN>
  twilio-phone-number: <BASE64_ENCODED_TWILIO_PHONE>
  
  # Firebase FCM for push notifications
  fcm-server-key: <BASE64_ENCODED_FCM_SERVER_KEY>
  fcm-project-id: <BASE64_ENCODED_FCM_PROJECT_ID>

---
apiVersion: v1
kind: Secret
metadata:
  name: market-data-credentials
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: market-data-service
    app.kubernetes.io/component: market-data
type: Opaque
data:
  alpha-vantage-api-key: <BASE64_ENCODED_ALPHA_VANTAGE_KEY>
  iex-cloud-token: <BASE64_ENCODED_IEX_CLOUD_TOKEN>
  yahoo-finance-key: <BASE64_ENCODED_YAHOO_FINANCE_KEY>

---
apiVersion: v1
kind: Secret
metadata:
  name: ai-service-credentials
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: ai-service
    app.kubernetes.io/component: ai
type: Opaque
data:
  openai-api-key: <BASE64_ENCODED_OPENAI_API_KEY>
  anthropic-api-key: <BASE64_ENCODED_ANTHROPIC_API_KEY>
  azure-openai-key: <BASE64_ENCODED_AZURE_OPENAI_KEY>
  azure-openai-endpoint: <BASE64_ENCODED_AZURE_OPENAI_ENDPOINT>

---
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: financial-planning
    app.kubernetes.io/component: aws
type: Opaque
data:
  access-key-id: <BASE64_ENCODED_AWS_ACCESS_KEY_ID>
  secret-access-key: <BASE64_ENCODED_AWS_SECRET_ACCESS_KEY>
  region: dXMtZWFzdC0x  # us-east-1
  s3-bucket: ZmluYW5jaWFsLXBsYW5uaW5nLWRvY3VtZW50cw==  # financial-planning-documents

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-credentials
  namespace: financial-planning-monitoring
  labels:
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/component: credentials
type: Opaque
data:
  # Grafana admin credentials
  grafana-admin-user: YWRtaW4=  # admin
  grafana-admin-password: <BASE64_ENCODED_GRAFANA_PASSWORD>
  
  # Prometheus basic auth
  prometheus-username: cHJvbWV0aGV1cw==  # prometheus
  prometheus-password: <BASE64_ENCODED_PROMETHEUS_PASSWORD>
  
  # Alertmanager credentials
  alertmanager-username: YWxlcnRtYW5hZ2Vy  # alertmanager
  alertmanager-password: <BASE64_ENCODED_ALERTMANAGER_PASSWORD>

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: financial-planning
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  tls.crt: <BASE64_ENCODED_TLS_CERTIFICATE>
  tls.key: <BASE64_ENCODED_TLS_PRIVATE_KEY>

---
apiVersion: v1
kind: Secret
metadata:
  name: blockchain-credentials
  namespace: financial-planning
  labels:
    app.kubernetes.io/name: blockchain-service
    app.kubernetes.io/component: blockchain
type: Opaque
data:
  # Ethereum/Polygon configuration
  private-key: <BASE64_ENCODED_BLOCKCHAIN_PRIVATE_KEY>
  infura-project-id: <BASE64_ENCODED_INFURA_PROJECT_ID>
  alchemy-api-key: <BASE64_ENCODED_ALCHEMY_API_KEY>
  
  # IPFS configuration
  ipfs-project-id: <BASE64_ENCODED_IPFS_PROJECT_ID>
  ipfs-project-secret: <BASE64_ENCODED_IPFS_PROJECT_SECRET>

---
# External Secrets Operator configuration (if using)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: financial-planning
spec:
  provider:
    vault:
      server: "https://vault.company.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "financial-planning"
          serviceAccountRef:
            name: "financial-planning-vault"