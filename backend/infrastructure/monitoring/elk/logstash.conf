input {
  beats {
    port => 5044
  }
  
  # Direct log input from financial planning app
  http {
    port => 8080
    codec => json
    tags => ["financial-planning-app"]
  }
  
  # Syslog input for system logs
  syslog {
    port => 5514
    tags => ["syslog"]
  }
}

filter {
  # Parse FastAPI logs
  if [tags] and "financial-planning-app" in [tags] {
    if [message] =~ /^\d{4}-\d{2}-\d{2}/ {
      grok {
        match => { 
          "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" 
        }
      }
      
      date {
        match => [ "timestamp", "ISO8601" ]
      }
      
      # Extract request ID if present
      if [log_message] =~ /request_id=([a-f0-9-]+)/ {
        grok {
          match => { "log_message" => "request_id=(?<request_id>[a-f0-9-]+)" }
        }
      }
      
      # Extract user ID if present
      if [log_message] =~ /user_id=(\d+)/ {
        grok {
          match => { "log_message" => "user_id=(?<user_id>\d+)" }
        }
        mutate {
          convert => { "user_id" => "integer" }
        }
      }
      
      # Extract simulation metrics
      if [log_message] =~ /simulation_id=([a-f0-9-]+)/ {
        grok {
          match => { "log_message" => "simulation_id=(?<simulation_id>[a-f0-9-]+)" }
        }
        mutate {
          add_tag => ["simulation"]
        }
      }
      
      # Extract performance metrics
      if [log_message] =~ /duration=(\d+\.?\d*)/ {
        grok {
          match => { "log_message" => "duration=(?<duration>\d+\.?\d*)" }
        }
        mutate {
          convert => { "duration" => "float" }
        }
      }
    }
  }
  
  # Parse nginx access logs
  if [fields][log_type] == "nginx" {
    grok {
      match => { 
        "message" => "%{NGINXACCESS}" 
      }
    }
    
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    
    mutate {
      convert => { "response" => "integer" }
      convert => { "bytes" => "integer" }
      convert => { "responsetime" => "float" }
    }
    
    # GeoIP lookup for client IPs
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }
  
  # Parse PostgreSQL logs
  if [fields][log_type] == "postgresql" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{POSINT:pid}\] %{WORD:user}@%{WORD:database} %{LOGLEVEL:log_level}:  %{GREEDYDATA:query}" 
      }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    
    # Extract slow query information
    if [query] =~ /duration: (\d+\.?\d*) ms/ {
      grok {
        match => { "query" => "duration: (?<query_duration>\d+\.?\d*) ms" }
      }
      mutate {
        convert => { "query_duration" => "float" }
        add_tag => ["slow_query"]
      }
    }
  }
  
  # Parse Redis logs
  if [fields][log_type] == "redis" {
    grok {
      match => { 
        "message" => "%{POSINT:pid}:%{CHAR:role} %{GREEDYDATA:redis_message}" 
      }
    }
  }
  
  # Security log analysis
  if [log_message] =~ /(failed|unauthorized|invalid|error|exception)/ {
    mutate {
      add_tag => ["security_event"]
    }
  }
  
  # Performance monitoring tags
  if [duration] and [duration] > 5.0 {
    mutate {
      add_tag => ["slow_request"]
    }
  }
  
  # Business logic tags
  if [log_message] =~ /(simulation|portfolio|recommendation|market_data)/ {
    mutate {
      add_tag => ["business_logic"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "financial-planning-%{+YYYY.MM.dd}"
    template_name => "financial-planning"
    template => "/usr/share/logstash/templates/financial-planning-template.json"
    template_overwrite => true
  }
  
  # Output critical errors to separate index
  if [log_level] == "ERROR" or [log_level] == "CRITICAL" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "financial-planning-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # Output security events to separate index
  if "security_event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "financial-planning-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Output performance issues to separate index
  if "slow_request" in [tags] or "slow_query" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "financial-planning-performance-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output
  stdout { 
    codec => rubydebug 
  }
}