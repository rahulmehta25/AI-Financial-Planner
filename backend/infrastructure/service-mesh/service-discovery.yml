# Service Discovery Configuration for Consul/Istio
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-discovery-config
  namespace: financial-planning
data:
  consul-config.hcl: |
    datacenter = "financial-planning"
    data_dir = "/opt/consul/data"
    log_level = "INFO"
    server = true
    bootstrap_expect = 3
    ui_config {
      enabled = true
    }
    
    connect {
      enabled = true
    }
    
    ports {
      grpc = 8502
    }
    
    acl = {
      enabled = true
      default_policy = "deny"
      enable_token_persistence = true
    }
    
    encrypt = "base64encodedkey"
    
    retry_join = [
      "consul-0.consul.financial-planning.svc.cluster.local",
      "consul-1.consul.financial-planning.svc.cluster.local",
      "consul-2.consul.financial-planning.svc.cluster.local"
    ]

---
# Service Registry Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-registry
  namespace: financial-planning
data:
  services.yml: |
    services:
      simulation-service:
        id: "simulation-service"
        name: "simulation-service"
        tags:
          - "financial"
          - "simulation"
          - "monte-carlo"
        address: "simulation-service.financial-planning.svc.cluster.local"
        port: 8001
        check:
          http: "http://simulation-service.financial-planning.svc.cluster.local:8001/health"
          interval: "30s"
          timeout: "5s"
        meta:
          version: "1.0.0"
          environment: "production"
          protocol: "http"
          
      user-service:
        id: "user-service"
        name: "user-service"
        tags:
          - "auth"
          - "users"
          - "profile"
        address: "user-service.financial-planning.svc.cluster.local"
        port: 8002
        check:
          http: "http://user-service.financial-planning.svc.cluster.local:8002/health"
          interval: "30s"
          timeout: "5s"
        meta:
          version: "1.0.0"
          environment: "production"
          protocol: "http"
          
      banking-service:
        id: "banking-service"
        name: "banking-service"
        tags:
          - "banking"
          - "plaid"
          - "yodlee"
          - "transactions"
        address: "banking-service.financial-planning.svc.cluster.local"
        port: 8003
        check:
          http: "http://banking-service.financial-planning.svc.cluster.local:8003/health"
          interval: "30s"
          timeout: "5s"
        meta:
          version: "1.0.0"
          environment: "production"
          protocol: "http"
          
      ml-service:
        id: "ml-service"
        name: "ml-service"
        tags:
          - "machine-learning"
          - "recommendations"
          - "ai"
        address: "ml-service.financial-planning.svc.cluster.local"
        port: 8004
        check:
          http: "http://ml-service.financial-planning.svc.cluster.local:8004/health"
          interval: "60s"
          timeout: "10s"
        meta:
          version: "1.0.0"
          environment: "production"
          protocol: "http"
          
      notification-service:
        id: "notification-service"
        name: "notification-service"
        tags:
          - "notifications"
          - "email"
          - "sms"
          - "push"
          - "websocket"
        address: "notification-service.financial-planning.svc.cluster.local"
        port: 8005
        check:
          http: "http://notification-service.financial-planning.svc.cluster.local:8005/health"
          interval: "30s"
          timeout: "5s"
        meta:
          version: "1.0.0"
          environment: "production"
          protocol: "http"
          
      document-service:
        id: "document-service"
        name: "document-service"
        tags:
          - "documents"
          - "pdf"
          - "reports"
        address: "document-service.financial-planning.svc.cluster.local"
        port: 8006
        check:
          http: "http://document-service.financial-planning.svc.cluster.local:8006/health"
          interval: "30s"
          timeout: "5s"
        meta:
          version: "1.0.0"
          environment: "production"
          protocol: "http"

---
# Service Mesh Sidecar Configuration
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: default
  namespace: financial-planning
spec:
  egress:
    - hosts:
        - "./*"
        - "istio-system/*"
        - "kube-system/*"
    - hosts:
        - "financial-planning/*"
      port:
        number: 5432
        name: postgres
        protocol: TCP
    - hosts:
        - "financial-planning/*"
      port:
        number: 6379
        name: redis
        protocol: TCP
    - hosts:
        - "financial-planning/*"
      port:
        number: 9092
        name: kafka
        protocol: TCP

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: financial-planning-services
  namespace: financial-planning
  labels:
    app: financial-planning
spec:
  selector:
    matchLabels:
      app: financial-planning
  endpoints:
    - port: metrics
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s

---
# Network Policy for service communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: financial-planning-network-policy
  namespace: financial-planning
spec:
  podSelector:
    matchLabels:
      app: financial-planning
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: istio-system
        - podSelector:
            matchLabels:
              app: financial-planning
      ports:
        - protocol: TCP
          port: 8001  # simulation-service
        - protocol: TCP
          port: 8002  # user-service
        - protocol: TCP
          port: 8003  # banking-service
        - protocol: TCP
          port: 8004  # ml-service
        - protocol: TCP
          port: 8005  # notification-service
        - protocol: TCP
          port: 8006  # document-service
        - protocol: TCP
          port: 15090 # Envoy admin
        - protocol: TCP
          port: 15001 # Envoy outbound
        - protocol: TCP
          port: 15006 # Envoy inbound
  egress:
    # Allow DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow database connections
    - to: []
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 9092  # Kafka
    # Allow external API calls
    - to: []
      ports:
        - protocol: TCP
          port: 443   # HTTPS
        - protocol: TCP
          port: 80    # HTTP
    # Allow internal service communication
    - to:
        - podSelector:
            matchLabels:
              app: financial-planning
      ports:
        - protocol: TCP
          port: 8001
        - protocol: TCP
          port: 8002
        - protocol: TCP
          port: 8003
        - protocol: TCP
          port: 8004
        - protocol: TCP
          port: 8005
        - protocol: TCP
          port: 8006