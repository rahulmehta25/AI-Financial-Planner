[tool:pytest]
# Pytest configuration for Financial Planning System

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add project root to Python path
addopts = 
    -v
    --strict-markers
    --strict-config
    --disable-warnings
    --tb=short
    --showlocals
    --durations=10
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-branch
    --cov-fail-under=80
    --junitxml=test-results.xml

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests across multiple components
    e2e: End-to-end tests simulating full user workflows
    performance: Performance and benchmark tests
    load: Load testing scenarios
    security: Security-focused tests
    smoke: Quick smoke tests for basic functionality
    slow: Slow running tests (deselect with '-m "not slow"')
    external: Tests requiring external services (APIs, databases)
    demo: Demo and example test suite
    asyncio: Asynchronous tests
    benchmark: Benchmark tests using pytest-benchmark
    validation: Financial calculation validation tests
    compliance: Regulatory compliance tests
    stress: Stress testing scenarios
    regression: Regression tests for bug fixes
    flaky: Tests that may be flaky (run multiple times)
    database: Tests requiring database connection
    redis: Tests requiring Redis connection
    gpu: Tests requiring GPU acceleration
    cpu_intensive: CPU-intensive tests
    memory_intensive: Memory-intensive tests
    network: Tests requiring network access
    mock_data: Tests using mock/synthetic data
    real_data: Tests using real market data

# Asyncio configuration
asyncio_mode = auto

# Test parallelization
addopts_parallel = -n auto

# Test output
console_output_style = progress
junit_family = xunit2

# Timeout for individual tests (in seconds)
timeout = 300
# Timeout method (thread or signal)
timeout_method = thread

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*ssl.*:urllib3.exceptions.InsecureRequestWarning
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::sqlalchemy.exc.SAWarning
    ignore::UserWarning:torch.*
    ignore::FutureWarning:numpy.*

# Log configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Environment variables for testing
env =
    ENVIRONMENT = testing
    TESTING = true
    SECRET_KEY = test-secret-key-do-not-use-in-production
    LOG_LEVEL = DEBUG
    DATABASE_URL = sqlite:///./test.db
    REDIS_URL = redis://localhost:6379/1
    CACHE_TTL = 60
    MAX_WORKERS = 4
    PYTHONPATH = .

# Test data directory
testdata = tests/data