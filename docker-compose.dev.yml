version: '3.8'

services:
  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: finplanner-postgres
    environment:
      POSTGRES_DB: portfolio_db
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-development_password_123}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/001-init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finplanner-network

  # PgBouncer for connection pooling
  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: finplanner-pgbouncer
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_DBNAME: portfolio_db
      DATABASES_USER: portfolio_user
      DATABASES_PASSWORD: ${DB_PASSWORD:-development_password_123}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      MIN_POOL_SIZE: 5
      RESERVE_POOL_SIZE: 5
      RESERVE_POOL_TIMEOUT: 3
      SERVER_IDLE_TIMEOUT: 600
    ports:
      - "6432:6432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - finplanner-network

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: finplanner-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finplanner-network

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: finplanner-api
    volumes:
      - ./backend:/app
      - ~/.cache/pip:/root/.cache/pip
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://portfolio_user:${DB_PASSWORD:-development_password_123}@pgbouncer:6432/portfolio_db
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /app
      ENV: development
      DEBUG: "true"
      SECRET_KEY: ${SECRET_KEY:-development_secret_key_change_in_production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-development_jwt_secret_change_in_production}
      YFINANCE_CACHE_DIR: /tmp/yfinance_cache
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_started
    networks:
      - finplanner-network

  # RQ Worker for background jobs
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: finplanner-worker
    volumes:
      - ./backend:/app
      - ~/.cache/pip:/root/.cache/pip
    environment:
      DATABASE_URL: postgresql://portfolio_user:${DB_PASSWORD:-development_password_123}@pgbouncer:6432/portfolio_db
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /app
      ENV: development
      YFINANCE_CACHE_DIR: /tmp/yfinance_cache
    command: rq worker high default low --url redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_started
    networks:
      - finplanner-network

  # RQ Scheduler for scheduled jobs
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: finplanner-scheduler
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgresql://portfolio_user:${DB_PASSWORD:-development_password_123}@pgbouncer:6432/portfolio_db
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /app
      ENV: development
    command: rqscheduler --url redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - finplanner-network

  # Frontend development server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: finplanner-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000
    command: npm run dev -- --host 0.0.0.0
    networks:
      - finplanner-network

  # Adminer for database management (development only)
  adminer:
    image: adminer
    container_name: finplanner-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - finplanner-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  finplanner-network:
    driver: bridge