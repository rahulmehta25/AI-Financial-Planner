version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: financial_planner_db
    environment:
      POSTGRES_DB: financial_planner
      POSTGRES_USER: financial_user
      POSTGRES_PASSWORD: secure_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U financial_user -d financial_planner"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: financial_planner_redis
    command: redis-server --appendonly yes --requirepass redis_password_123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # TimescaleDB (for time-series data)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: financial_planner_timescaledb
    environment:
      POSTGRES_DB: financial_planner_ts
      POSTGRES_USER: financial_user
      POSTGRES_PASSWORD: secure_password_123
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U financial_user -d financial_planner_ts"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - financial_network

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial_planner_api
    environment:
      - DATABASE_URL=postgresql://financial_user:secure_password_123@postgres:5432/financial_planner
      - REDIS_URL=redis://:redis_password_123@redis:6379
      - TIMESCALEDB_URL=postgresql://financial_user:secure_password_123@timescaledb:5432/financial_planner_ts
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - financial_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial_planner_worker
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://financial_user:secure_password_123@postgres:5432/financial_planner
      - REDIS_URL=redis://:redis_password_123@redis:6379
      - CELERY_BROKER_URL=redis://:redis_password_123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password_123@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - financial_network

  # Celery Beat for scheduled tasks
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial_planner_beat
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://financial_user:secure_password_123@postgres:5432/financial_planner
      - REDIS_URL=redis://:redis_password_123@redis:6379
      - CELERY_BROKER_URL=redis://:redis_password_123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password_123@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - financial_network

  # Frontend (Next.js)
  frontend:
    image: nginxdemos/hello
    container_name: financial_planner_frontend
    environment:
      - NODE_ENV=development
    ports:
      - "3002:80"
    networks:
      - financial_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: financial_planner_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - frontend
    networks:
      - financial_network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: financial_planner_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - financial_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: financial_planner_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - financial_network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: financial_planner_jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - financial_network

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: financial_planner_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - financial_network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: financial_planner_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - financial_network

  # Filebeat for log collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: financial_planner_filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    networks:
      - financial_network

volumes:
  postgres_data:
  redis_data:
  timescaledb_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  financial_network:
    driver: bridge