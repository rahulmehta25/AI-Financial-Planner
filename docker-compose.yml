# Development Docker Compose Configuration
# Financial Planning System - Development Setup
version: '3.8'

services:
  # ============================================================================
  # Database Services
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: financial_planning_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-financial_planning}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - financial_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-financial_planning}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: financial_planning_redis_dev
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - financial_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================================================
  # Application Services
  # ============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: financial_planning_backend_dev
    restart: unless-stopped
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-financial_planning}
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-financial_planning}
      - POSTGRES_PORT=5432
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      
      # Development Configuration
      - ENVIRONMENT=development
      - DEBUG=true
      - RELOAD=true
      - SECRET_KEY=dev-secret-key-change-in-production
      
      # CORS for development
      - BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:3001","http://127.0.0.1:3000"]
      
      # External Services (optional for dev)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - backend_logs:/app/logs
    networks:
      - financial_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: financial_planning_frontend_dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-8000}
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    networks:
      - financial_network
    depends_on:
      - backend
    stdin_open: true
    tty: true

  # ============================================================================
  # Optional Development Services (use --profile full to enable)
  # ============================================================================
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: financial_planning_celery_dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-financial_planning}
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - financial_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.celery worker --loglevel=debug --concurrency=2
    profiles:
      - full

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: financial_planning_beat_dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-financial_planning}
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - financial_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.celery beat --loglevel=debug
    profiles:
      - full

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: financial_planning_flower_dev
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    networks:
      - financial_network
    depends_on:
      - redis
    command: celery -A app.celery flower --port=5555 --broker=redis://redis:6379/0
    profiles:
      - full

# ============================================================================
# Networks Configuration
# ============================================================================
networks:
  financial_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ============================================================================
# Volumes Configuration
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local