# Demo Dockerfile for Financial Planning Frontend
# Optimized for quick demo startup and development

# Base stage with Node.js
FROM node:18-alpine AS base

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    curl \
    bash \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production --silent

# Development stage
FROM base AS demo-dev

# Install all dependencies including dev dependencies for development
RUN npm ci --silent

# Copy source code
COPY . .

# Create demo-specific configuration
RUN echo '/** @type {import("next").NextConfig} */\n\
const nextConfig = {\n\
  experimental: {\n\
    appDir: true,\n\
  },\n\
  env: {\n\
    NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000",\n\
    NEXT_PUBLIC_DEMO_MODE: "true",\n\
  },\n\
  async rewrites() {\n\
    return [\n\
      {\n\
        source: "/api/:path*",\n\
        destination: `${process.env.NEXT_PUBLIC_API_URL}/api/:path*`,\n\
      },\n\
    ];\n\
  },\n\
  // Enable standalone output for better Docker performance\n\
  output: "standalone",\n\
  // Disable telemetry\n\
  telemetry: false,\n\
  // Image optimization settings\n\
  images: {\n\
    domains: ["localhost"],\n\
    unoptimized: true,\n\
  },\n\
};\n\
\n\
module.exports = nextConfig;' > next.config.demo.js

# Create demo health check API route
RUN mkdir -p src/app/api/health && \
    echo 'import { NextResponse } from "next/server";\n\
\n\
export async function GET() {\n\
  try {\n\
    return NextResponse.json({\n\
      status: "healthy",\n\
      timestamp: new Date().toISOString(),\n\
      service: "frontend",\n\
      mode: "demo",\n\
      version: "1.0.0"\n\
    });\n\
  } catch (error) {\n\
    return NextResponse.json(\n\
      { status: "unhealthy", error: error.message },\n\
      { status: 500 }\n\
    );\n\
  }\n\
}' > src/app/api/health/route.ts

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "=== Financial Planning Demo Frontend Starting ==="\n\
echo "Node Environment: ${NODE_ENV:-development}"\n\
echo "API URL: ${NEXT_PUBLIC_API_URL}"\n\
echo "Demo Mode: ${NEXT_PUBLIC_DEMO_MODE}"\n\
echo "================================================"\n\
\n\
# Wait for backend to be available\n\
if [ -n "${NEXT_PUBLIC_API_URL}" ]; then\n\
    echo "Waiting for backend at ${NEXT_PUBLIC_API_URL}..."\n\
    timeout=60\n\
    while [ $timeout -gt 0 ]; do\n\
        if curl -f "${NEXT_PUBLIC_API_URL}/health" >/dev/null 2>&1; then\n\
            echo "Backend is ready!"\n\
            break\n\
        fi\n\
        echo "Waiting for backend... ($timeout seconds remaining)"\n\
        sleep 2\n\
        timeout=$((timeout-2))\n\
    done\n\
    \n\
    if [ $timeout -le 0 ]; then\n\
        echo "Warning: Backend not available, continuing anyway..."\n\
    fi\n\
fi\n\
\n\
# Install any new dependencies\n\
if [ -f package.json ]; then\n\
    echo "Installing dependencies..."\n\
    npm install --silent || echo "Dependency installation failed, continuing..."\n\
fi\n\
\n\
# Start the development server\n\
echo "Starting Next.js development server..."\n\
exec npm run dev' > /app/start_demo.sh && chmod +x /app/start_demo.sh

# Health check script
RUN echo '#!/bin/bash\n\
curl -f http://localhost:3000/api/health || exit 1' > /app/health_check.sh && chmod +x /app/health_check.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/health_check.sh

# Default command for development
CMD ["/app/start_demo.sh"]

# Production build stage
FROM base AS demo-build

# Copy source and build
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS demo-prod

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Install runtime dependencies
RUN apk add --no-cache curl bash

# Copy built application
COPY --from=demo-build --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=demo-build --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=demo-build --chown=nextjs:nodejs /app/public ./public

# Create production startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "=== Financial Planning Demo Frontend (Production) ==="\n\
echo "Node Environment: ${NODE_ENV:-production}"\n\
echo "==================================================="\n\
\n\
# Start the production server\n\
exec node server.js' > /app/start_demo_prod.sh && chmod +x /app/start_demo_prod.sh

# Health check for production
RUN echo '#!/bin/bash\n\
curl -f http://localhost:3000/api/health || exit 1' > /app/health_check.sh && chmod +x /app/health_check.sh

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/health_check.sh

# Default command
CMD ["/app/start_demo_prod.sh"]

# Default stage for demo (development)
FROM demo-dev AS demo

# Add demo-specific environment variables
ENV NODE_ENV=development \
    NEXT_TELEMETRY_DISABLED=1 \
    NEXT_PUBLIC_DEMO_MODE=true

# Create demo data directory
RUN mkdir -p /app/demo_data

# Create demo configuration file
RUN echo '{\n\
  "demo": {\n\
    "mode": true,\n\
    "apiUrl": "http://backend:8000",\n\
    "features": {\n\
      "analytics": true,\n\
      "charts": true,\n\
      "export": true\n\
    },\n\
    "users": {\n\
      "demo": {\n\
        "email": "demo@financialplanning.com",\n\
        "password": "demo123",\n\
        "name": "Demo User"\n\
      }\n\
    }\n\
  }\n\
}' > /app/demo_data/config.json

# Metadata
LABEL maintainer="Financial Planning Demo" \
      version="1.0.0" \
      description="Demo frontend for Financial Planning System" \
      demo.mode="true" \
      demo.framework="nextjs" \
      demo.features="development"