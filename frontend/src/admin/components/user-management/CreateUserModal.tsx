"use client";

import React, { useState } from 'react';
import { X, UserPlus, Mail, User, Shield } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogFooter
} from '@/components/ui/dialog';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import type { AdminUser, UserRole, UserStatus, AccountType } from '../../types';

interface CreateUserModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUserCreated: (user: AdminUser) => void;
}

interface NewUser {
  firstName: string;
  lastName: string;
  email: string;
  role: UserRole;
  status: UserStatus;
  accountType: AccountType;
  sendWelcomeEmail: boolean;
  requirePasswordReset: boolean;
}

/**
 * CreateUserModal Component
 * 
 * Features:
 * - User creation form
 * - Role and permission selection
 * - Email notifications
 * - Form validation
 */
export const CreateUserModal: React.FC<CreateUserModalProps> = ({
  isOpen,
  onClose,
  onUserCreated,
}) => {
  const [formData, setFormData] = useState<NewUser>({
    firstName: '',
    lastName: '',
    email: '',
    role: 'user',
    status: 'active',
    accountType: 'free',
    sendWelcomeEmail: true,
    requirePasswordReset: true,
  });

  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Partial<Record<keyof NewUser, string>>>({});

  const validateForm = (): boolean => {
    const newErrors: Partial<Record<keyof NewUser, string>> = {};

    if (!formData.firstName.trim()) {
      newErrors.firstName = 'First name is required';
    }

    if (!formData.lastName.trim()) {
      newErrors.lastName = 'Last name is required';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);
    try {
      // Create new user object
      const newUser: AdminUser = {
        id: `user-${Date.now()}`, // In real app, this would be generated by the server
        firstName: formData.firstName.trim(),
        lastName: formData.lastName.trim(),
        email: formData.email.trim().toLowerCase(),
        role: formData.role,
        status: formData.status,
        accountType: formData.accountType,
        createdAt: new Date().toISOString(),
        lastLoginAt: null,
        emailVerified: false,
        isActive: formData.status === 'active',
        permissions: [],
      };

      // In a real application, you would make an API call here
      console.log('Creating user:', newUser);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      onUserCreated(newUser);
      handleReset();
    } catch (error) {
      console.error('Failed to create user:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setFormData({
      firstName: '',
      lastName: '',
      email: '',
      role: 'user',
      status: 'active',
      accountType: 'free',
      sendWelcomeEmail: true,
      requirePasswordReset: true,
    });
    setErrors({});
  };

  const handleClose = () => {
    handleReset();
    onClose();
  };

  const updateField = <K extends keyof NewUser>(field: K, value: NewUser[K]) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <UserPlus className="h-5 w-5" />
            Create New User
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center gap-2">
              <User className="h-4 w-4" />
              Basic Information
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  First Name *
                </label>
                <Input
                  id="firstName"
                  value={formData.firstName}
                  onChange={(e) => updateField('firstName', e.target.value)}
                  placeholder="Enter first name"
                  className={errors.firstName ? 'border-red-500' : ''}
                />
                {errors.firstName && (
                  <p className="mt-1 text-xs text-red-600 dark:text-red-400">
                    {errors.firstName}
                  </p>
                )}
              </div>

              <div>
                <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Last Name *
                </label>
                <Input
                  id="lastName"
                  value={formData.lastName}
                  onChange={(e) => updateField('lastName', e.target.value)}
                  placeholder="Enter last name"
                  className={errors.lastName ? 'border-red-500' : ''}
                />
                {errors.lastName && (
                  <p className="mt-1 text-xs text-red-600 dark:text-red-400">
                    {errors.lastName}
                  </p>
                )}
              </div>
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Email Address *
              </label>
              <Input
                id="email"
                type="email"
                value={formData.email}
                onChange={(e) => updateField('email', e.target.value)}
                placeholder="Enter email address"
                className={errors.email ? 'border-red-500' : ''}
              />
              {errors.email && (
                <p className="mt-1 text-xs text-red-600 dark:text-red-400">
                  {errors.email}
                </p>
              )}
            </div>
          </div>

          {/* Account Settings */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center gap-2">
              <Shield className="h-4 w-4" />
              Account Settings
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label htmlFor="role" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  User Role
                </label>
                <Select value={formData.role} onValueChange={(value) => updateField('role', value as UserRole)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="user">User</SelectItem>
                    <SelectItem value="premium">Premium</SelectItem>
                    <SelectItem value="enterprise">Enterprise</SelectItem>
                    <SelectItem value="support">Support</SelectItem>
                    <SelectItem value="moderator">Moderator</SelectItem>
                    <SelectItem value="admin">Admin</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label htmlFor="status" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Account Status
                </label>
                <Select value={formData.status} onValueChange={(value) => updateField('status', value as UserStatus)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                    <SelectItem value="pending">Pending</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label htmlFor="accountType" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Account Type
                </label>
                <Select value={formData.accountType} onValueChange={(value) => updateField('accountType', value as AccountType)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="free">Free</SelectItem>
                    <SelectItem value="trial">Trial</SelectItem>
                    <SelectItem value="premium">Premium</SelectItem>
                    <SelectItem value="enterprise">Enterprise</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          {/* Email Settings */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center gap-2">
              <Mail className="h-4 w-4" />
              Email Settings
            </h3>
            
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="sendWelcomeEmail"
                  checked={formData.sendWelcomeEmail}
                  onCheckedChange={(checked) => updateField('sendWelcomeEmail', checked as boolean)}
                />
                <label htmlFor="sendWelcomeEmail" className="text-sm font-medium">
                  Send welcome email with account details
                </label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="requirePasswordReset"
                  checked={formData.requirePasswordReset}
                  onCheckedChange={(checked) => updateField('requirePasswordReset', checked as boolean)}
                />
                <label htmlFor="requirePasswordReset" className="text-sm font-medium">
                  Require password reset on first login
                </label>
              </div>
            </div>
          </div>

          {/* Role Permissions Info */}
          <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
            <h4 className="font-medium text-blue-900 dark:text-blue-200 mb-2">
              Role Permissions for "{formData.role}"
            </h4>
            <div className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
              {formData.role === 'admin' && (
                <>
                  <p>• Full system access and user management</p>
                  <p>• Access to admin dashboard and all features</p>
                  <p>• Can manage other users and system settings</p>
                </>
              )}
              {formData.role === 'moderator' && (
                <>
                  <p>• Limited admin access for content moderation</p>
                  <p>• Can manage user content and basic user actions</p>
                  <p>• Access to support tools</p>
                </>
              )}
              {formData.role === 'support' && (
                <>
                  <p>• Access to support tools and ticket management</p>
                  <p>• Can assist users and access user information</p>
                  <p>• Limited admin functionality</p>
                </>
              )}
              {['user', 'premium', 'enterprise'].includes(formData.role) && (
                <>
                  <p>• Standard user access to financial planning tools</p>
                  <p>• {formData.role !== 'user' ? 'Premium features enabled' : 'Basic features only'}</p>
                  <p>• No admin or support access</p>
                </>
              )}
            </div>
          </div>

          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              disabled={loading}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={loading}
              className="min-w-[120px]"
            >
              {loading ? (
                <>
                  <div className="animate-spin -ml-1 mr-3 h-4 w-4 border-2 border-white border-t-transparent rounded-full" />
                  Creating...
                </>
              ) : (
                <>
                  <UserPlus className="h-4 w-4 mr-2" />
                  Create User
                </>
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};