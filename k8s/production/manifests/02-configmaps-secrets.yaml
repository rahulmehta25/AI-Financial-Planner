---
# Main Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: financial-planning-config
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    environment: production
    config-version: v1.0.0
data:
  # Application Settings
  PROJECT_NAME: "AI Financial Planning System"
  VERSION: "1.0.0"
  ENVIRONMENT: "production"
  API_V1_STR: "/api/v1"
  DEBUG: "false"
  
  # Server Configuration
  HOST: "0.0.0.0"
  PORT: "8000"
  WORKERS: "4"
  
  # Allowed Origins for CORS (production URLs)
  BACKEND_CORS_ORIGINS: |
    https://financial-planning.yourdomain.com,
    https://app.financial-planning.yourdomain.com,
    https://api.financial-planning.yourdomain.com
  
  # Database Configuration (non-sensitive)
  DATABASE_HOST: "postgresql-cluster.database.svc.cluster.local"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "financial_planning_prod"
  DATABASE_POOL_SIZE: "20"
  DATABASE_MAX_OVERFLOW: "30"
  DATABASE_POOL_TIMEOUT: "30"
  DATABASE_POOL_RECYCLE: "3600"
  
  # Redis Configuration
  REDIS_HOST: "redis-cluster.cache.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_POOL_SIZE: "20"
  REDIS_TIMEOUT: "5"
  
  # Logging Configuration
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  LOG_TO_FILE: "false"
  ENABLE_STRUCTURED_LOGGING: "true"
  
  # Security Configuration
  SECURITY_SECRET_KEY_LENGTH: "256"
  JWT_ALGORITHM: "RS256"
  JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "30"
  JWT_REFRESH_TOKEN_EXPIRE_DAYS: "7"
  RATE_LIMIT_REQUESTS_PER_MINUTE: "100"
  ENABLE_API_VERSIONING: "true"
  
  # Performance Configuration
  ENABLE_CACHING: "true"
  CACHE_TTL_SECONDS: "3600"
  ENABLE_COMPRESSION: "true"
  MAX_REQUEST_SIZE_MB: "10"
  REQUEST_TIMEOUT_SECONDS: "30"
  
  # Market Data Configuration
  MARKET_DATA_CACHE_TTL: "300"
  ENABLE_REAL_TIME_DATA: "true"
  MARKET_DATA_RETRY_ATTEMPTS: "3"
  
  # AI/ML Configuration
  ML_MODEL_CACHE_TTL: "7200"
  ENABLE_GPU_ACCELERATION: "false"
  MAX_SIMULATION_THREADS: "8"
  MONTE_CARLO_DEFAULT_SIMULATIONS: "10000"
  
  # Health Check Configuration
  HEALTH_CHECK_TIMEOUT: "10"
  READINESS_PROBE_TIMEOUT: "5"
  LIVENESS_PROBE_TIMEOUT: "5"
  
  # Monitoring Configuration
  ENABLE_METRICS: "true"
  METRICS_PORT: "9090"
  ENABLE_TRACING: "true"
  JAEGER_AGENT_HOST: "jaeger-agent.monitoring.svc.cluster.local"
  JAEGER_AGENT_PORT: "6831"
---
# Secrets for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: financial-planning-secrets
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    environment: production
type: Opaque
stringData:
  # Database credentials
  DATABASE_USER: "financial_planning_user"
  DATABASE_PASSWORD: "CHANGE_ME_IN_PRODUCTION"  # Use sealed-secrets or external secret management
  DATABASE_URL: "postgresql://financial_planning_user:CHANGE_ME_IN_PRODUCTION@postgresql-cluster.database.svc.cluster.local:5432/financial_planning_prod"
  
  # Redis credentials
  REDIS_PASSWORD: "CHANGE_ME_IN_PRODUCTION"
  REDIS_URL: "redis://:CHANGE_ME_IN_PRODUCTION@redis-cluster.cache.svc.cluster.local:6379/0"
  
  # JWT Keys (should be generated and stored securely)
  JWT_SECRET_KEY: "CHANGE_ME_GENERATE_SECURE_256_BIT_KEY"
  JWT_PRIVATE_KEY: |
    -----BEGIN PRIVATE KEY-----
    # Generate RSA private key for JWT signing
    # openssl genpkey -algorithm RSA -out private_key.pem -pkcs8 -aes256
    REPLACE_WITH_ACTUAL_PRIVATE_KEY
    -----END PRIVATE KEY-----
  JWT_PUBLIC_KEY: |
    -----BEGIN PUBLIC KEY-----
    # Extract public key from private key
    # openssl rsa -pubout -in private_key.pem -out public_key.pem
    REPLACE_WITH_ACTUAL_PUBLIC_KEY
    -----END PUBLIC KEY-----
  
  # API Keys for external services
  ALPHA_VANTAGE_API_KEY: "CHANGE_ME_API_KEY"
  FINNHUB_API_KEY: "CHANGE_ME_API_KEY"
  QUANDL_API_KEY: "CHANGE_ME_API_KEY"
  
  # Encryption keys
  ENCRYPTION_KEY: "CHANGE_ME_GENERATE_FERNET_KEY"
  DATA_ENCRYPTION_KEY: "CHANGE_ME_AES_256_KEY"
  
  # Third-party service credentials
  SMTP_USERNAME: "smtp_user"
  SMTP_PASSWORD: "CHANGE_ME_SMTP_PASSWORD"
  SMTP_HOST: "smtp.yourdomain.com"
  SMTP_PORT: "587"
  
  # OAuth credentials
  OAUTH_CLIENT_SECRET: "CHANGE_ME_OAUTH_SECRET"
  
  # Monitoring and observability
  SENTRY_DSN: "https://your-sentry-dsn@sentry.io/project-id"
  DATADOG_API_KEY: "CHANGE_ME_DATADOG_KEY"
---
# TLS Certificates Secret
apiVersion: v1
kind: Secret
metadata:
  name: financial-planning-tls
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    environment: production
type: kubernetes.io/tls
data:
  tls.crt: |
    # Base64 encoded TLS certificate
    # Use cert-manager or manually provision certificates
    REPLACE_WITH_BASE64_ENCODED_CERTIFICATE
  tls.key: |
    # Base64 encoded TLS private key
    REPLACE_WITH_BASE64_ENCODED_PRIVATE_KEY
---
# Cache ConfigMap for runtime caching
apiVersion: v1
kind: ConfigMap
metadata:
  name: financial-planning-cache
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    environment: production
    type: cache
data:
  # This ConfigMap is used for application-level caching
  # It can be updated by the application at runtime
  cache_policy: |
    {
      "default_ttl": 3600,
      "max_size": "100MB",
      "eviction_policy": "LRU",
      "regions": {
        "market_data": {
          "ttl": 300,
          "max_entries": 10000
        },
        "user_profiles": {
          "ttl": 1800,
          "max_entries": 5000
        },
        "simulation_results": {
          "ttl": 7200,
          "max_entries": 1000
        }
      }
    }
---
# Database Migration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-migration-config
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    environment: production
    component: database
data:
  alembic.ini: |
    [alembic]
    script_location = alembic
    prepend_sys_path = .
    version_path_separator = os
    sqlalchemy.url = postgresql://financial_planning_user:PLACEHOLDER@postgresql-cluster.database.svc.cluster.local:5432/financial_planning_prod
    
    [post_write_hooks]
    hooks = black
    black.type = console_scripts
    black.entrypoint = black
    black.options = -l 79 REVISION_SCRIPT_FILENAME
    
    [loggers]
    keys = root,sqlalchemy,alembic
    
    [handlers]
    keys = console
    
    [formatters]
    keys = generic
    
    [logger_root]
    level = WARN
    handlers = console
    qualname =
    
    [logger_sqlalchemy]
    level = WARN
    handlers =
    qualname = sqlalchemy.engine
    
    [logger_alembic]
    level = INFO
    handlers =
    qualname = alembic
    
    [handler_console]
    class = StreamHandler
    args = (sys.stderr,)
    level = NOTSET
    formatter = generic
    
    [formatter_generic]
    format = %(levelname)-5.5s [%(name)s] %(message)s
    datefmt = %H:%M:%S