---
# Main API Service (ClusterIP for internal communication)
apiVersion: v1
kind: Service
metadata:
  name: financial-planning-api-svc
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    component: backend
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: financial-planning-api
    component: backend
---
# LoadBalancer Service for external traffic
apiVersion: v1
kind: Service
metadata:
  name: financial-planning-api-lb
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    component: backend
    environment: production
    service-type: external
  annotations:
    # AWS Load Balancer annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "financial-planning-lb-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "api-lb"
    
    # Security annotations
    service.beta.kubernetes.io/aws-load-balancer-security-groups: "sg-12345678"
    service.beta.kubernetes.io/aws-load-balancer-extra-security-groups: "sg-87654321"
    
    # Performance annotations
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      deregistration_delay.timeout_seconds=30,
      stickiness.enabled=false,
      load_balancing.algorithm.type=round_robin
    
    # GCP Load Balancer annotations (alternative)
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "financial-planning-api-backendconfig"}'
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  # Restrict access to specific IP ranges for production security
  - "10.0.0.0/8"        # Internal VPC
  - "172.16.0.0/12"     # Private networks
  - "192.168.0.0/16"    # Private networks
  # Add specific public IP ranges for external access
  - "203.0.113.0/24"    # Example public range - replace with actual
  
  ports:
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  
  selector:
    app: financial-planning-api
    component: backend
  
  sessionAffinity: None
  externalTrafficPolicy: Cluster  # or Local for better performance but less even distribution
---
# Headless Service for StatefulSet-like behavior (if needed)
apiVersion: v1
kind: Service
metadata:
  name: financial-planning-api-headless
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    component: backend
    environment: production
    service-type: headless
spec:
  type: ClusterIP
  clusterIP: None  # Headless service
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  selector:
    app: financial-planning-api
    component: backend
---
# Service for monitoring and metrics
apiVersion: v1
kind: Service
metadata:
  name: financial-planning-api-metrics
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    component: monitoring
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    prometheus.io/scheme: "http"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: financial-planning-api
    component: backend
---
# Ingress for HTTP/HTTPS routing (using NGINX Ingress Controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: financial-planning-api-ingress
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    component: ingress
    environment: production
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Request size limit
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Load balancing
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Health checks
    nginx.ingress.kubernetes.io/health-check-path: "/health"
    nginx.ingress.kubernetes.io/health-check-method: "GET"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    
    # Certificate management (using cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    
    # External DNS
    external-dns.alpha.kubernetes.io/hostname: "api.financial-planning.yourdomain.com"
    external-dns.alpha.kubernetes.io/ttl: "300"
spec:
  tls:
  - hosts:
    - api.financial-planning.yourdomain.com
    - financial-planning-api.yourdomain.com
    secretName: financial-planning-api-tls
  
  rules:
  - host: api.financial-planning.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: financial-planning-api-svc
            port:
              number: 80
      - path: /health
        pathType: Exact
        backend:
          service:
            name: financial-planning-api-svc
            port:
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: financial-planning-api-metrics
            port:
              number: 9090
  
  - host: financial-planning-api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: financial-planning-api-svc
            port:
              number: 80
---
# GCP BackendConfig (if using GCP)
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: financial-planning-api-backendconfig
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    environment: production
spec:
  # Health check configuration
  healthCheck:
    checkIntervalSec: 30
    timeoutSec: 10
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /health
    port: 8000
  
  # Session affinity
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 3600
  
  # Connection draining
  connectionDraining:
    drainingTimeoutSec: 60
  
  # Security policies
  securityPolicy:
    name: "financial-planning-security-policy"
  
  # Logging
  logging:
    enable: true
    sampleRate: 1.0
  
  # CDN configuration
  cdn:
    enabled: true
    cachePolicy:
      includeHost: true
      includeProtocol: true
      includeQueryString: false
  
  # IAP (Identity-Aware Proxy) configuration
  iap:
    enabled: false
    oauthclientCredentials:
      secretName: oauth-client-secret
---
# Service Monitor for Prometheus monitoring
apiVersion: v1
kind: Endpoints
metadata:
  name: financial-planning-api-svc
  namespace: financial-planning-prod
  labels:
    app: financial-planning-api
    component: backend
    environment: production
subsets:
- addresses: []  # Will be populated automatically by the service
  ports:
  - name: http
    port: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    protocol: TCP