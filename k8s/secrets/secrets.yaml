# NOTE: In production, these secrets should be created using external secret management
# tools like AWS Secrets Manager, HashiCorp Vault, or sealed-secrets
# This file is for reference only - actual secrets should never be committed to version control

apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: production
  labels:
    app: financial-planner
    component: database
type: Opaque
stringData:
  connection-string: "postgresql://username:password@postgresql-service:5432/financial_planner"
  username: "financial_planner_user"
  password: "REPLACE_WITH_ACTUAL_PASSWORD"
  database: "financial_planner"
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: production
  labels:
    app: financial-planner
    component: cache
type: Opaque
stringData:
  connection-string: "redis://redis-service:6379/0"
  password: "REPLACE_WITH_ACTUAL_REDIS_PASSWORD"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: production
  labels:
    app: financial-planner
    component: api
type: Opaque
stringData:
  secret-key: "REPLACE_WITH_ACTUAL_SECRET_KEY_BASE64"
  jwt-secret: "REPLACE_WITH_ACTUAL_JWT_SECRET"
  encryption-key: "REPLACE_WITH_ACTUAL_ENCRYPTION_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: market-data-secrets
  namespace: production
  labels:
    app: financial-planner
    component: market-data
type: Opaque
stringData:
  polygon-api-key: "REPLACE_WITH_ACTUAL_POLYGON_API_KEY"
  databento-api-key: "REPLACE_WITH_ACTUAL_DATABENTO_API_KEY"
  alpha-vantage-api-key: "REPLACE_WITH_ACTUAL_ALPHA_VANTAGE_API_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: ai-secrets
  namespace: production
  labels:
    app: financial-planner
    component: ai
type: Opaque
stringData:
  openai-api-key: "REPLACE_WITH_ACTUAL_OPENAI_API_KEY"
  anthropic-api-key: "REPLACE_WITH_ACTUAL_ANTHROPIC_API_KEY"
  langchain-api-key: "REPLACE_WITH_ACTUAL_LANGCHAIN_API_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    component: monitoring
type: Opaque
stringData:
  grafana-admin-password: "REPLACE_WITH_ACTUAL_GRAFANA_PASSWORD"
  prometheus-config: "REPLACE_WITH_ACTUAL_PROMETHEUS_CONFIG"
  alertmanager-config: "REPLACE_WITH_ACTUAL_ALERTMANAGER_CONFIG"
---
# External Secret Store Integration Example (using AWS Secrets Manager)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secret-store
  namespace: production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        serviceAccountRef:
          name: external-secrets-sa
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: production
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: aws-secret-store
    kind: SecretStore
  target:
    name: db-secret
    creationPolicy: Owner
  data:
  - secretKey: connection-string
    remoteRef:
      key: financial-planner/database
      property: connection_string
  - secretKey: username
    remoteRef:
      key: financial-planner/database
      property: username
  - secretKey: password
    remoteRef:
      key: financial-planner/database
      property: password